Jackie Luo (jhl2182)

My final project is Quizzer, a program that allows you to self-quiz terms by definitions. The functionality is really divided into specific actions: first, adding terms, then updating them, then deleting them, then getting quizzed on them. At each point in the first three parts of the program (add/update/delete), the user can either perform the action or skip it. For the quizzer part of the program, the user gets a definition that she entered and needs to enter the correct term. At the end of the quiz, she gets a report of how she did and which terms (if any) she needs to review.

All you need to run the program is to type "python quizzer.py" on the command line. For setup, you do need to have MongoDB installed on your computer. On OSX, if you have Homebrew, you can install MongoDB with "brew install mongodb" and then enter "pip install pymongo" to install PyMongo, the specific module I decided to use to interface easily with the database. I'm using Python 3.4, and PyMongo is the only outside module I used. I also used datetime and random, which should be part of the standard library.

The project was a fun experience for me because it allowed me to create a program that I could use and apply really easily. Tools like Quizlet are fine but often overdone and have lots of features I don't want, and a lightweight program that helps me study is useful for me in the future. Even typing the terms and definitions (which I could have implemented differently by pulling the data from a given document or file) was great because it allowed me to study as I added the information, too.

For me, Python was a great language to use because it was fast and easy to implement with my project, and modules like PyMongo are available for Python, which is important. I can't imagine that another language would really be better unless my database grew dramatically in size (i.e., millions of terms) and optimization of speed became an issue. Overall, I don't think I made any serious changes to the project I proposed.

An interesting extension of the project could be to build a Flask app on top of it, with this program as a loose structure for what the back-end might be like. As a developer, the command line is a really great way to interact with the program, but it's obviously not user-friendly for someone who's never opened Terminal before, so that could be one way to make it more accessible to others. Another cool addition would be to add the reverse quiz: giving the user a term and asking them to define it. That would require a form of natural language processing to check the meaning of the definition against the one given, since we can't expect humans to remember word-by-word definitions, but that would probably test a higher level of understanding than providing a term if given a definition. Beyond that, I would love to add more error-handling for user input. I aimed to cover most cases (i.e., an empty database collection), but I'm sure that there are more that would be important to catch in a real-world situation.